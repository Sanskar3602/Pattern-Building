import plotly.graph_objects as go
import numpy as np
import pandas as pd
distance = 5

values = pd.read_csv('data\\banknifty_Aug_week_4.csv')
values.columns = ['time', 'open', 'high' ,'low', 'close', 'Adj close', 'volume']

def impPoints(values, point, left, right):
    high = 1
    low = 1
    for i in range(point-left, point+right+1):
        if point-left<0 or point+right+1>len(values):
            return 0
        elif(values.low[i]<values.low[point]):
            low = 0
        elif(values.high[i]>values.high[point]):
            high =0
    if high:
        return 2
    elif low:
        return 1
    else:
        return 0

values['impPoints'] = values.apply(lambda x: impPoints(values, x.name, distance,
distance), axis = 1)

high = np.array([])
low = np.array([])
for i in range(len(values)):
    if values.iloc[i].impPoints == 1:
        low = np.append(low, i)
    elif values.iloc[i].impPoints == 2:
        high = np.append(high, i)


douTopx = np.array([])
douTopy = np.array([])
i = 1
file = 1
while(i<len(high)-1):
    x1 = int(high[i]) 
    x2 = int(high[i+1])
    y1 = values.iloc[x1].high
    y2 = values.iloc[x2].high
    if(abs(y2 - y1) <20 and x2 - x1 < 30 and x2-x1>8):
        m = (y2-y1)/(x2-x1)
        c = y1 - m*x1
        for x1low in range(x1, x1-35, -1):
            if x1low in low:
                if (values.iloc[x1low].low - y1)/(x1low-x1)>7:
                    for k in range(x1, x2):
                        if(values.iloc[k].low<min(y1, y2)- 50):
                            for x2low in range(x2, x2+35):
                                if x2low in low:
                                    if (values.iloc[x2low].low - y2)/(x2low-x2)<-7:
                                        douTopx = np.append(douTopx, x1low)
                                        douTopx = np.append(douTopx, x1)
                                        douTopx = np.append(douTopx, x2)
                                        douTopx = np.append(douTopx, x2low)
                                        douTopx = np.append(douTopx, None)
                                        douTopx = np.append(douTopx, None)
                                        douTopy = np.append(douTopy, values.iloc[int(x1low)].low)
                                        douTopy = np.append(douTopy, y1)
                                        douTopy = np.append(douTopy, y2)
                                        douTopy = np.append(douTopy, values.iloc[int(x2low)].low)
                                        douTopy = np.append(douTopy, None)
                                        douTopy = np.append(douTopy, None)
                                        input = open('ML_data\\input\\week3\\'+ str(file) +'.txt', 'w')
                                        output = open('ML_data\\target\\week3\\'+ str(file) +'.txt', 'w')
                                        for line in range(x1low,x2):
                                            str1 = str(values['open'][line]) + ", " +  str(values['high'][line]) + "," + str(values['low'][line]) + ", " + str(values['close'][line]) + " " + "\n"
                                            input.write(str1)
                                        for line in range(x2,x2low):
                                            str2 = str(values['open'][line]) + ", " +  str(values['high'][line]) + "," + str(values['low'][line]) + " ," + str(values['close'][line]) + " " + "\n"
                                            output.write(str2)
                                        file += 1
                                        input.close()
                                        output.close()
                                        i = i+2
                                        break
                            break
                    break
    i+=1
# fig = go.Figure(data=[go.Candlestick(x=values.index, open = values['open'], 
# high = values['high'], low = values['low'], close = values['close'])])
# fig.update_layout(xaxis_rangeslider_visible=False)
# fig.add_trace(go.Scatter(x=douTopx,y=douTopy, mode="lines",
# line=go.scatter.Line(color="black"), showlegend=False))
# fig.show()
# for i in range(len(douTopx)):
#     f.write('\n'.join(str(douTopx[i])))
# f.write(str(data))